CMAKE_MINIMUM_REQUIRED(VERSION 3.7)

PROJECT(vkh VERSION 0.1.0 DESCRIPTION "Vulkan helpers library")

#SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake")

IF (UNIX)
    SET(CMAKE_CXX_FLAGS "-Wall -Wno-extra")
ELSEIF(MSVC)
    SET(CMAKE_CXX_FLAGS "-W4")
ENDIF()


SET(CMAKE_EXE_LINKER_FLAGS "-lm")

IF(NOT CMAKE_BUILD_TYPE)
  SET(CMAKE_BUILD_TYPE Release)
ENDIF()
MESSAGE(STATUS "${CMAKE_BUILD_TYPE} build.")

if (CMAKE_BUILD_TYPE STREQUAL "Debug")
	ADD_DEFINITIONS (-DDEBUG)
	OPTION(ENABLE_VALIDATION "enable vulkan validation layer" ON)
ELSE()
	UNSET(ENABLE_VALIDATION CACHE)
ENDIF()

IF (ENABLE_VALIDATION)
	ADD_DEFINITIONS (-DVKH_USE_VALIDATION)
ENDIF ()

if (NOT VULKAN_SDK)
	set(VULKAN_SDK "$ENV{VULKAN_SDK}" CACHE STRING "LunarG Vulkan SDK path")
	if (VULKAN_SDK)
			set(ENV{VULKAN_SDK} ${VULKAN_SDK})
			SET(vulkanSdkLayerPath "${VULKAN_SDK}/etc/vulkan/explicit_layer.d")
			IF (NOT EXISTS "${vulkanSdkLayerPath}")
				SET(vulkanSdkLayerPath "${VULKAN_SDK}/etc/explicit_layer.d")
			endif ()
			SET(ENV{VK_LAYER_PATH} "${vulkanSdkLayerPath}")
			link_directories("${VULKAN_SDK}/lib")
	endif ()
endif ()

MESSAGE(STATUS "VULKAN_SDK = $ENV{VULKAN_SDK}")
MESSAGE(STATUS "VK_LAYER_PATH = $ENV{VK_LAYER_PATH}")

FIND_PACKAGE(Vulkan REQUIRED)

INCLUDE(GNUInstallDirs)

FILE(GLOB sources src/*.c*)

CONFIGURE_FILE(vkh.pc.in vkh.pc @ONLY)
INSTALL(FILES ${CMAKE_CURRENT_BINARY_DIR}/vkh.pc DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/pkgconfig)

FUNCTION (setup_lib LibName)
	SET_TARGET_PROPERTIES(${LibName} PROPERTIES
			OUTPUT_NAME ${PROJECT_NAME}
			VERSION ${PROJECT_VERSION}
			SOVERSION 1
			PUBLIC_HEADER include/vkh.h
	)
	TARGET_INCLUDE_DIRECTORIES(${LibName} PRIVATE
			${CMAKE_CURRENT_SOURCE_DIR}/include
			${CMAKE_CURRENT_SOURCE_DIR}/src
			${Vulkan_INCLUDE_DIRS}
	)
	TARGET_LINK_LIBRARIES(${LibName}
		${Vulkan_LIBRARIES}
	)
	INSTALL(TARGETS ${LibName}
		LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
		ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
		PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})
ENDFUNCTION ()

ADD_LIBRARY("${PROJECT_NAME}_static" STATIC ${sources})
SET_PROPERTY(TARGET "${PROJECT_NAME}_static" PROPERTY POSITION_INDEPENDENT_CODE OFF)
setup_lib ("${PROJECT_NAME}_static")

ADD_LIBRARY("${PROJECT_NAME}_shared" SHARED ${sources})
SET_PROPERTY(TARGET "${PROJECT_NAME}_static" PROPERTY POSITION_INDEPENDENT_CODE ON)
setup_lib ("${PROJECT_NAME}_shared")


#get_cmake_property(_variableNames VARIABLES)
#foreach (_variableName ${_variableNames})
#message(STATUS "${_variableName}=${${_variableName}}")
#endforeach()
